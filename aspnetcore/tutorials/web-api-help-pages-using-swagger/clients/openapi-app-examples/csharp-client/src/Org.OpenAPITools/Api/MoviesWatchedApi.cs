/* 
 * Movies Watched API
 *
 * A simple example of ASP.NET Core Web API for movies watched during COVID-19 shelter-in-place.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMoviesWatchedApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a Movie.
        /// </summary>
        /// <remarks>
        /// Record a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Movie</returns>
        Movie CreateMovie (string version, Movie movie = default(Movie));

        /// <summary>
        /// Creates a Movie.
        /// </summary>
        /// <remarks>
        /// Record a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> CreateMovieWithHttpInfo (string version, Movie movie = default(Movie));
        /// <summary>
        /// Deletes a specific Movie.
        /// </summary>
        /// <remarks>
        /// Removes a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Movie</returns>
        Movie DeleteMovieByID (long id, string version);

        /// <summary>
        /// Deletes a specific Movie.
        /// </summary>
        /// <remarks>
        /// Removes a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> DeleteMovieByIDWithHttpInfo (long id, string version);
        /// <summary>
        /// Gets all watched movies.
        /// </summary>
        /// <remarks>
        /// Fetch all movies watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Movie&gt;</returns>
        List<Movie> GetAllMovies (string version);

        /// <summary>
        /// Gets all watched movies.
        /// </summary>
        /// <remarks>
        /// Fetch all movies watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Movie&gt;</returns>
        ApiResponse<List<Movie>> GetAllMoviesWithHttpInfo (string version);
        /// <summary>
        /// Gets a specific movie by its ID.
        /// </summary>
        /// <remarks>
        /// Fetch a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Movie</returns>
        Movie GetMovieByID (long id, string version);

        /// <summary>
        /// Gets a specific movie by its ID.
        /// </summary>
        /// <remarks>
        /// Fetch a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> GetMovieByIDWithHttpInfo (long id, string version);
        /// <summary>
        /// Updates an existing Movie.
        /// </summary>
        /// <remarks>
        /// Changes the information for a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Movie</returns>
        Movie UpdateMovieByID (long id, string version, Movie movie = default(Movie));

        /// <summary>
        /// Updates an existing Movie.
        /// </summary>
        /// <remarks>
        /// Changes the information for a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> UpdateMovieByIDWithHttpInfo (long id, string version, Movie movie = default(Movie));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a Movie.
        /// </summary>
        /// <remarks>
        /// Record a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> CreateMovieAsync (string version, Movie movie = default(Movie));

        /// <summary>
        /// Creates a Movie.
        /// </summary>
        /// <remarks>
        /// Record a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> CreateMovieAsyncWithHttpInfo (string version, Movie movie = default(Movie));
        /// <summary>
        /// Deletes a specific Movie.
        /// </summary>
        /// <remarks>
        /// Removes a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> DeleteMovieByIDAsync (long id, string version);

        /// <summary>
        /// Deletes a specific Movie.
        /// </summary>
        /// <remarks>
        /// Removes a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> DeleteMovieByIDAsyncWithHttpInfo (long id, string version);
        /// <summary>
        /// Gets all watched movies.
        /// </summary>
        /// <remarks>
        /// Fetch all movies watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Movie&gt;</returns>
        System.Threading.Tasks.Task<List<Movie>> GetAllMoviesAsync (string version);

        /// <summary>
        /// Gets all watched movies.
        /// </summary>
        /// <remarks>
        /// Fetch all movies watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Movie&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Movie>>> GetAllMoviesAsyncWithHttpInfo (string version);
        /// <summary>
        /// Gets a specific movie by its ID.
        /// </summary>
        /// <remarks>
        /// Fetch a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> GetMovieByIDAsync (long id, string version);

        /// <summary>
        /// Gets a specific movie by its ID.
        /// </summary>
        /// <remarks>
        /// Fetch a movie watched during COVID-19 shelter-in-place.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> GetMovieByIDAsyncWithHttpInfo (long id, string version);
        /// <summary>
        /// Updates an existing Movie.
        /// </summary>
        /// <remarks>
        /// Changes the information for a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> UpdateMovieByIDAsync (long id, string version, Movie movie = default(Movie));

        /// <summary>
        /// Updates an existing Movie.
        /// </summary>
        /// <remarks>
        /// Changes the information for a watched movie.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> UpdateMovieByIDAsyncWithHttpInfo (long id, string version, Movie movie = default(Movie));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MoviesWatchedApi : IMoviesWatchedApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesWatchedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MoviesWatchedApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesWatchedApi"/> class
        /// </summary>
        /// <returns></returns>
        public MoviesWatchedApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesWatchedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MoviesWatchedApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a Movie. Record a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Movie</returns>
        public Movie CreateMovie (string version, Movie movie = default(Movie))
        {
             ApiResponse<Movie> localVarResponse = CreateMovieWithHttpInfo(version, movie);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Movie. Record a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>ApiResponse of Movie</returns>
        public ApiResponse<Movie> CreateMovieWithHttpInfo (string version, Movie movie = default(Movie))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->CreateMovie");

            var localVarPath = "/api/v{version}/MoviesWatched";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (movie != null && movie.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(movie); // http body (model) parameter
            }
            else
            {
                localVarPostBody = movie; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMovie", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Creates a Movie. Record a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> CreateMovieAsync (string version, Movie movie = default(Movie))
        {
             ApiResponse<Movie> localVarResponse = await CreateMovieAsyncWithHttpInfo(version, movie);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Movie. Record a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Movie>> CreateMovieAsyncWithHttpInfo (string version, Movie movie = default(Movie))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->CreateMovie");

            var localVarPath = "/api/v{version}/MoviesWatched";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (movie != null && movie.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(movie); // http body (model) parameter
            }
            else
            {
                localVarPostBody = movie; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMovie", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Deletes a specific Movie. Removes a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Movie</returns>
        public Movie DeleteMovieByID (long id, string version)
        {
             ApiResponse<Movie> localVarResponse = DeleteMovieByIDWithHttpInfo(id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific Movie. Removes a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Movie</returns>
        public ApiResponse<Movie> DeleteMovieByIDWithHttpInfo (long id, string version)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MoviesWatchedApi->DeleteMovieByID");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->DeleteMovieByID");

            var localVarPath = "/api/v{version}/MoviesWatched/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMovieByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Deletes a specific Movie. Removes a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> DeleteMovieByIDAsync (long id, string version)
        {
             ApiResponse<Movie> localVarResponse = await DeleteMovieByIDAsyncWithHttpInfo(id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a specific Movie. Removes a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Movie>> DeleteMovieByIDAsyncWithHttpInfo (long id, string version)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MoviesWatchedApi->DeleteMovieByID");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->DeleteMovieByID");

            var localVarPath = "/api/v{version}/MoviesWatched/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMovieByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Gets all watched movies. Fetch all movies watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Movie&gt;</returns>
        public List<Movie> GetAllMovies (string version)
        {
             ApiResponse<List<Movie>> localVarResponse = GetAllMoviesWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all watched movies. Fetch all movies watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Movie&gt;</returns>
        public ApiResponse<List<Movie>> GetAllMoviesWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->GetAllMovies");

            var localVarPath = "/api/v{version}/MoviesWatched";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Movie>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Movie>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Movie>)));
        }

        /// <summary>
        /// Gets all watched movies. Fetch all movies watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Movie&gt;</returns>
        public async System.Threading.Tasks.Task<List<Movie>> GetAllMoviesAsync (string version)
        {
             ApiResponse<List<Movie>> localVarResponse = await GetAllMoviesAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all watched movies. Fetch all movies watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Movie&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Movie>>> GetAllMoviesAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->GetAllMovies");

            var localVarPath = "/api/v{version}/MoviesWatched";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMovies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Movie>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Movie>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Movie>)));
        }

        /// <summary>
        /// Gets a specific movie by its ID. Fetch a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Movie</returns>
        public Movie GetMovieByID (long id, string version)
        {
             ApiResponse<Movie> localVarResponse = GetMovieByIDWithHttpInfo(id, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a specific movie by its ID. Fetch a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Movie</returns>
        public ApiResponse<Movie> GetMovieByIDWithHttpInfo (long id, string version)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MoviesWatchedApi->GetMovieByID");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->GetMovieByID");

            var localVarPath = "/api/v{version}/MoviesWatched/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMovieByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Gets a specific movie by its ID. Fetch a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> GetMovieByIDAsync (long id, string version)
        {
             ApiResponse<Movie> localVarResponse = await GetMovieByIDAsyncWithHttpInfo(id, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a specific movie by its ID. Fetch a movie watched during COVID-19 shelter-in-place.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Movie>> GetMovieByIDAsyncWithHttpInfo (long id, string version)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MoviesWatchedApi->GetMovieByID");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->GetMovieByID");

            var localVarPath = "/api/v{version}/MoviesWatched/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMovieByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Updates an existing Movie. Changes the information for a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Movie</returns>
        public Movie UpdateMovieByID (long id, string version, Movie movie = default(Movie))
        {
             ApiResponse<Movie> localVarResponse = UpdateMovieByIDWithHttpInfo(id, version, movie);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing Movie. Changes the information for a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>ApiResponse of Movie</returns>
        public ApiResponse<Movie> UpdateMovieByIDWithHttpInfo (long id, string version, Movie movie = default(Movie))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MoviesWatchedApi->UpdateMovieByID");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->UpdateMovieByID");

            var localVarPath = "/api/v{version}/MoviesWatched/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (movie != null && movie.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(movie); // http body (model) parameter
            }
            else
            {
                localVarPostBody = movie; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMovieByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Updates an existing Movie. Changes the information for a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> UpdateMovieByIDAsync (long id, string version, Movie movie = default(Movie))
        {
             ApiResponse<Movie> localVarResponse = await UpdateMovieByIDAsyncWithHttpInfo(id, version, movie);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing Movie. Changes the information for a watched movie.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Movie ID</param>
        /// <param name="version"></param>
        /// <param name="movie"> (optional)</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Movie>> UpdateMovieByIDAsyncWithHttpInfo (long id, string version, Movie movie = default(Movie))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MoviesWatchedApi->UpdateMovieByID");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling MoviesWatchedApi->UpdateMovieByID");

            var localVarPath = "/api/v{version}/MoviesWatched/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (movie != null && movie.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(movie); // http body (model) parameter
            }
            else
            {
                localVarPostBody = movie; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMovieByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Movie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

    }
}
