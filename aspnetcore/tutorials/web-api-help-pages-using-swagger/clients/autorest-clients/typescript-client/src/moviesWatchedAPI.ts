/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { MoviesWatchedAPIContext } from "./moviesWatchedAPIContext";

class MoviesWatchedAPI extends MoviesWatchedAPIContext {
  /**
   * Initializes a new instance of the MoviesWatchedAPI class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.MoviesWatchedAPIOptions) {
    super(options);
  }

  /**
   * Fetch all movies watched during COVID-19 shelter-in-place.
   * @summary Gets all watched movies.
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllMoviesResponse>
   */
  getAllMovies(version: string, options?: msRest.RequestOptionsBase): Promise<Models.GetAllMoviesResponse>;
  /**
   * @param version
   * @param callback The callback
   */
  getAllMovies(version: string, callback: msRest.ServiceCallback<Models.Movie[]>): void;
  /**
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllMovies(version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Movie[]>): void;
  getAllMovies(version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Movie[]>, callback?: msRest.ServiceCallback<Models.Movie[]>): Promise<Models.GetAllMoviesResponse> {
    return this.sendOperationRequest(
      {
        version,
        options
      },
      getAllMoviesOperationSpec,
      callback) as Promise<Models.GetAllMoviesResponse>;
  }

  /**
   * Record a movie watched during COVID-19 shelter-in-place.
   * @summary Creates a Movie.
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateMovieResponse>
   */
  createMovie(version: string, options?: Models.MoviesWatchedAPICreateMovieOptionalParams): Promise<Models.CreateMovieResponse>;
  /**
   * @param version
   * @param callback The callback
   */
  createMovie(version: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  createMovie(version: string, options: Models.MoviesWatchedAPICreateMovieOptionalParams, callback: msRest.ServiceCallback<any>): void;
  createMovie(version: string, options?: Models.MoviesWatchedAPICreateMovieOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CreateMovieResponse> {
    return this.sendOperationRequest(
      {
        version,
        options
      },
      createMovieOperationSpec,
      callback) as Promise<Models.CreateMovieResponse>;
  }

  /**
   * Fetch a movie watched during COVID-19 shelter-in-place.
   * @summary Gets a specific movie by its ID.
   * @param id Movie ID
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMovieByIDResponse>
   */
  getMovieByID(id: number, version: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMovieByIDResponse>;
  /**
   * @param id Movie ID
   * @param version
   * @param callback The callback
   */
  getMovieByID(id: number, version: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id Movie ID
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  getMovieByID(id: number, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getMovieByID(id: number, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetMovieByIDResponse> {
    return this.sendOperationRequest(
      {
        id,
        version,
        options
      },
      getMovieByIDOperationSpec,
      callback) as Promise<Models.GetMovieByIDResponse>;
  }

  /**
   * Changes the information for a watched movie.
   * @summary Updates an existing Movie.
   * @param id Movie ID
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateMovieByIDResponse>
   */
  updateMovieByID(id: number, version: string, options?: Models.MoviesWatchedAPIUpdateMovieByIDOptionalParams): Promise<Models.UpdateMovieByIDResponse>;
  /**
   * @param id Movie ID
   * @param version
   * @param callback The callback
   */
  updateMovieByID(id: number, version: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id Movie ID
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  updateMovieByID(id: number, version: string, options: Models.MoviesWatchedAPIUpdateMovieByIDOptionalParams, callback: msRest.ServiceCallback<any>): void;
  updateMovieByID(id: number, version: string, options?: Models.MoviesWatchedAPIUpdateMovieByIDOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateMovieByIDResponse> {
    return this.sendOperationRequest(
      {
        id,
        version,
        options
      },
      updateMovieByIDOperationSpec,
      callback) as Promise<Models.UpdateMovieByIDResponse>;
  }

  /**
   * Removes a watched movie.
   * @summary Deletes a specific Movie.
   * @param id Movie ID
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteMovieByIDResponse>
   */
  deleteMovieByID(id: number, version: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteMovieByIDResponse>;
  /**
   * @param id Movie ID
   * @param version
   * @param callback The callback
   */
  deleteMovieByID(id: number, version: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id Movie ID
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMovieByID(id: number, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteMovieByID(id: number, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeleteMovieByIDResponse> {
    return this.sendOperationRequest(
      {
        id,
        version,
        options
      },
      deleteMovieByIDOperationSpec,
      callback) as Promise<Models.DeleteMovieByIDResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllMoviesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/MoviesWatched",
  urlParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Movie"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createMovieOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v{version}/MoviesWatched",
  urlParameters: [
    Parameters.version
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Movie
  },
  responses: {
    201: {
      bodyMapper: Mappers.Movie
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const getMovieByIDOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Movie
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const updateMovieByIDOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v{version}/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.version
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Movie
  },
  responses: {
    204: {
      bodyMapper: Mappers.Movie
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const deleteMovieByIDOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v{version}/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.version
  ],
  responses: {
    204: {
      bodyMapper: Mappers.Movie
    },
    404: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

export {
  MoviesWatchedAPI,
  MoviesWatchedAPIContext,
  Models as MoviesWatchedAPIModels,
  Mappers as MoviesWatchedAPIMappers
};
