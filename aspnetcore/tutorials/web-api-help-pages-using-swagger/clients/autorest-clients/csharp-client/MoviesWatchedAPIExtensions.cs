// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WatchedMovies.Rest
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MoviesWatchedAPI.
    /// </summary>
    public static partial class MoviesWatchedAPIExtensions
    {
            /// <summary>
            /// Gets all watched movies.
            /// </summary>
            /// <remarks>
            /// Fetch all movies watched during COVID-19 shelter-in-place.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<Movie> GetAllMovies(this IMoviesWatchedAPI operations, string version)
            {
                return operations.GetAllMoviesAsync(version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all watched movies.
            /// </summary>
            /// <remarks>
            /// Fetch all movies watched during COVID-19 shelter-in-place.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Movie>> GetAllMoviesAsync(this IMoviesWatchedAPI operations, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllMoviesWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Movie.
            /// </summary>
            /// <remarks>
            /// Record a movie watched during COVID-19 shelter-in-place.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateMovie(this IMoviesWatchedAPI operations, string version, Movie body = default(Movie))
            {
                return operations.CreateMovieAsync(version, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Movie.
            /// </summary>
            /// <remarks>
            /// Record a movie watched during COVID-19 shelter-in-place.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateMovieAsync(this IMoviesWatchedAPI operations, string version, Movie body = default(Movie), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMovieWithHttpMessagesAsync(version, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific movie by its ID.
            /// </summary>
            /// <remarks>
            /// Fetch a movie watched during COVID-19 shelter-in-place.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Movie ID
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object GetMovieByID(this IMoviesWatchedAPI operations, long id, string version)
            {
                return operations.GetMovieByIDAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific movie by its ID.
            /// </summary>
            /// <remarks>
            /// Fetch a movie watched during COVID-19 shelter-in-place.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Movie ID
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMovieByIDAsync(this IMoviesWatchedAPI operations, long id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMovieByIDWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing Movie.
            /// </summary>
            /// <remarks>
            /// Changes the information for a watched movie.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Movie ID
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateMovieByID(this IMoviesWatchedAPI operations, long id, string version, Movie body = default(Movie))
            {
                return operations.UpdateMovieByIDAsync(id, version, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing Movie.
            /// </summary>
            /// <remarks>
            /// Changes the information for a watched movie.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Movie ID
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateMovieByIDAsync(this IMoviesWatchedAPI operations, long id, string version, Movie body = default(Movie), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMovieByIDWithHttpMessagesAsync(id, version, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specific Movie.
            /// </summary>
            /// <remarks>
            /// Removes a watched movie.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Movie ID
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object DeleteMovieByID(this IMoviesWatchedAPI operations, long id, string version)
            {
                return operations.DeleteMovieByIDAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specific Movie.
            /// </summary>
            /// <remarks>
            /// Removes a watched movie.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Movie ID
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteMovieByIDAsync(this IMoviesWatchedAPI operations, long id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteMovieByIDWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
