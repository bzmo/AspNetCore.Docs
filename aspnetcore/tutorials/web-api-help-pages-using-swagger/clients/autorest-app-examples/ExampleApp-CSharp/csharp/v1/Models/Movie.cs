// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WatchedMovies.Rest.v1.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Movie
    {
        /// <summary>
        /// Initializes a new instance of the Movie class.
        /// </summary>
        public Movie()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Movie class.
        /// </summary>
        public Movie(string name, double rating, long? id = default(long?), string comment = default(string))
        {
            Id = id;
            Name = name;
            Rating = rating;
            Comment = comment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rating")]
        public double Rating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Rating > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Rating", 5);
            }
            if (Rating < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Rating", 0);
            }
        }
    }
}
