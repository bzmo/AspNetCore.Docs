"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Models = require("./models");
exports.MoviesWatchedAPIModels = Models;
const Mappers = require("./models/mappers");
exports.MoviesWatchedAPIMappers = Mappers;
const Parameters = require("./models/parameters");
const moviesWatchedAPIContext_1 = require("./moviesWatchedAPIContext");
exports.MoviesWatchedAPIContext = moviesWatchedAPIContext_1.MoviesWatchedAPIContext;
class MoviesWatchedAPI extends moviesWatchedAPIContext_1.MoviesWatchedAPIContext {
    /**
     * Initializes a new instance of the MoviesWatchedAPI class.
     * @param [options] The parameter options
     */
    constructor(options) {
        super(options);
    }
    getAllMovies(options, callback) {
        return this.sendOperationRequest({
            options
        }, getAllMoviesOperationSpec, callback);
    }
    createMovie(options, callback) {
        return this.sendOperationRequest({
            options
        }, createMovieOperationSpec, callback);
    }
    updateMovieRating(id, options, callback) {
        return this.sendOperationRequest({
            id,
            options
        }, updateMovieRatingOperationSpec, callback);
    }
    getMovieById(id, options, callback) {
        return this.sendOperationRequest({
            id,
            options
        }, getMovieByIdOperationSpec, callback);
    }
    updateMovieById(id, options, callback) {
        return this.sendOperationRequest({
            id,
            options
        }, updateMovieByIdOperationSpec, callback);
    }
    deleteMovieById(id, options, callback) {
        return this.sendOperationRequest({
            id,
            options
        }, deleteMovieByIdOperationSpec, callback);
    }
}
exports.MoviesWatchedAPI = MoviesWatchedAPI;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllMoviesOperationSpec = {
    httpMethod: "GET",
    path: "api/v2/MoviesWatched",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Movie"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer
};
const createMovieOperationSpec = {
    httpMethod: "POST",
    path: "api/v2/MoviesWatched",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Movie
    },
    responses: {
        201: {
            bodyMapper: Mappers.Movie
        },
        default: {}
    },
    serializer
};
const updateMovieRatingOperationSpec = {
    httpMethod: "PATCH",
    path: "api/v2/MoviesWatched/{id}",
    urlParameters: [
        Parameters.id
    ],
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: {
            serializedName: "body",
            type: {
                name: "Number"
            }
        }
    },
    responses: {
        204: {},
        default: {}
    },
    serializer
};
const getMovieByIdOperationSpec = {
    httpMethod: "GET",
    path: "api/v2/MoviesWatched/{id}",
    urlParameters: [
        Parameters.id
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Movie
        },
        default: {}
    },
    serializer
};
const updateMovieByIdOperationSpec = {
    httpMethod: "PUT",
    path: "api/v2/MoviesWatched/{id}",
    urlParameters: [
        Parameters.id
    ],
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Movie
    },
    responses: {
        204: {},
        default: {}
    },
    serializer
};
const deleteMovieByIdOperationSpec = {
    httpMethod: "DELETE",
    path: "api/v2/MoviesWatched/{id}",
    urlParameters: [
        Parameters.id
    ],
    responses: {
        204: {},
        default: {}
    },
    serializer
};
//# sourceMappingURL=moviesWatchedAPI.js.map