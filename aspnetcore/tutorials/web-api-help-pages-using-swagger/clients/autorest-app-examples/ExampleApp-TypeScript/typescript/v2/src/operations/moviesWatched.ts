/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/moviesWatchedMappers";
import * as Parameters from "../models/parameters";
import { MoviesWatchedAPIContext } from "../moviesWatchedAPIContext";

/** Class representing a MoviesWatched. */
export class MoviesWatched {
  private readonly client: MoviesWatchedAPIContext;

  /**
   * Create a MoviesWatched.
   * @param {MoviesWatchedAPIContext} client Reference to the service client.
   */
  constructor(client: MoviesWatchedAPIContext) {
    this.client = client;
  }

  /**
   * Fetch all movies watched during COVID-19 shelter-in-place.
   * @summary Gets all watched movies sorted alphabetically.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoviesWatchedGetAllMoviesResponse>
   */
  getAllMovies(options?: msRest.RequestOptionsBase): Promise<Models.MoviesWatchedGetAllMoviesResponse>;
  /**
   * @param callback The callback
   */
  getAllMovies(callback: msRest.ServiceCallback<Models.Movie[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllMovies(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Movie[]>): void;
  getAllMovies(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Movie[]>, callback?: msRest.ServiceCallback<Models.Movie[]>): Promise<Models.MoviesWatchedGetAllMoviesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllMoviesOperationSpec,
      callback) as Promise<Models.MoviesWatchedGetAllMoviesResponse>;
  }

  /**
   * Record a movie watched during COVID-19 shelter-in-place.
   * @summary Creates a Movie.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoviesWatchedCreateMovieResponse>
   */
  createMovie(options?: Models.MoviesWatchedCreateMovieOptionalParams): Promise<Models.MoviesWatchedCreateMovieResponse>;
  /**
   * @param callback The callback
   */
  createMovie(callback: msRest.ServiceCallback<Models.Movie>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createMovie(options: Models.MoviesWatchedCreateMovieOptionalParams, callback: msRest.ServiceCallback<Models.Movie>): void;
  createMovie(options?: Models.MoviesWatchedCreateMovieOptionalParams | msRest.ServiceCallback<Models.Movie>, callback?: msRest.ServiceCallback<Models.Movie>): Promise<Models.MoviesWatchedCreateMovieResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      createMovieOperationSpec,
      callback) as Promise<Models.MoviesWatchedCreateMovieResponse>;
  }

  /**
   * Updates movie rating.
   * @summary Updates a rating of a specific Movie.
   * @param id Movie Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateMovieRating(id: number, options?: Models.MoviesWatchedUpdateMovieRatingOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id Movie Id
   * @param callback The callback
   */
  updateMovieRating(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Movie Id
   * @param options The optional parameters
   * @param callback The callback
   */
  updateMovieRating(id: number, options: Models.MoviesWatchedUpdateMovieRatingOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateMovieRating(id: number, options?: Models.MoviesWatchedUpdateMovieRatingOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      updateMovieRatingOperationSpec,
      callback);
  }

  /**
   * Fetch a movie watched during COVID-19 shelter-in-place.
   * @summary Gets a specific movie by its ID.
   * @param id Movie Id
   * @param [options] The optional parameters
   * @returns Promise<Models.MoviesWatchedGetMovieByIdResponse>
   */
  getMovieById(id: number, options?: msRest.RequestOptionsBase): Promise<Models.MoviesWatchedGetMovieByIdResponse>;
  /**
   * @param id Movie Id
   * @param callback The callback
   */
  getMovieById(id: number, callback: msRest.ServiceCallback<Models.Movie>): void;
  /**
   * @param id Movie Id
   * @param options The optional parameters
   * @param callback The callback
   */
  getMovieById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Movie>): void;
  getMovieById(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Movie>, callback?: msRest.ServiceCallback<Models.Movie>): Promise<Models.MoviesWatchedGetMovieByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getMovieByIdOperationSpec,
      callback) as Promise<Models.MoviesWatchedGetMovieByIdResponse>;
  }

  /**
   * Changes the information for a watched movie.
   * @summary Updates an existing Movie.
   * @param id Movie ID
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateMovieById(id: number, options?: Models.MoviesWatchedUpdateMovieByIdOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id Movie ID
   * @param callback The callback
   */
  updateMovieById(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Movie ID
   * @param options The optional parameters
   * @param callback The callback
   */
  updateMovieById(id: number, options: Models.MoviesWatchedUpdateMovieByIdOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateMovieById(id: number, options?: Models.MoviesWatchedUpdateMovieByIdOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      updateMovieByIdOperationSpec,
      callback);
  }

  /**
   * Removes a watched movie.
   * @summary Deletes a specific Movie.
   * @param id Movie ID
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMovieById(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id Movie ID
   * @param callback The callback
   */
  deleteMovieById(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id Movie ID
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMovieById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMovieById(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMovieByIdOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllMoviesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v2/MoviesWatched",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Movie"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createMovieOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v2/MoviesWatched",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Movie
  },
  responses: {
    201: {
      bodyMapper: Mappers.Movie
    },
    default: {}
  },
  serializer
};

const updateMovieRatingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/v2/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "Number"
      }
    }
  },
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getMovieByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v2/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Movie
    },
    default: {}
  },
  serializer
};

const updateMovieByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v2/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Movie
  },
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteMovieByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v2/MoviesWatched/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};
